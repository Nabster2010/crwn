{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { addItem } from '../utils';\nimport { getUserCartRef } from '../firebase/firebase.utils'; //persist state in local storage\n// let items = localStorage.getItem('cartItems');\n// const persist = (data) =>\n// \tlocalStorage.setItem('cartItems', JSON.stringify(data));\n\nexport const cartSlice = createSlice({\n  name: 'cart',\n  initialState: {\n    cartIsHidden: false,\n    cartItems: getCartItemsFireStore() || [] //cartItems: items ? JSON.parse(items) : [],\n\n  },\n  reducers: {\n    toggleCartHidden: state => {\n      state.cartIsHidden = !state.cartIsHidden;\n    },\n    addToCart: (state, action) => {\n      const items = addItem(action.payload, state.cartItems);\n      state.cartItems = [...items]; //persist(state.cartItems);\n\n      setCartItemsFirestore(state.cartItems);\n    },\n    removeItem: (state, action) => {\n      state.cartItems = state.cartItems.filter(item => item.id !== action.payload); //persist(state.cartItems);\n\n      setCartItemsFirestore(state.cartItems);\n    },\n    itemIncrement: (state, action) => {\n      state.cartItems = state.cartItems.map(item => item.id === action.payload ? { ...item,\n        quantity: item.quantity + 1\n      } : item); //persist(state.cartItems);\n\n      setCartItemsFirestore(state.cartItems);\n    },\n    clearCart: state => {\n      state.cartItems = [];\n    },\n    itemDecrement: (state, action) => {\n      const exist = state.cartItems.find(item => item.id === action.payload && item.quantity === 1);\n\n      if (exist) {\n        state.cartItems = state.cartItems.filter(item => item.id !== exist.id); //persist(state.cartItems);\n      } else {}\n\n      state.cartItems = state.cartItems.map(item => item.id === action.payload ? { ...item,\n        quantity: item.quantity - 1\n      } : item); //persist(state.cartItems);\n\n      setCartItemsFirestore(state.cartItems);\n    }\n  }\n});\nexport const setCartItemsFirestore = async cartItems => {\n  const cartDocRef = await getUserCartRef();\n  await cartDocRef.update({\n    cartItems\n  });\n};\nexport const getCartItemsFireStore = async () => {\n  const cartDocRef = await getUserCartRef();\n  const snapshot = await cartDocRef.get();\n  return snapshot.data().cartItems;\n};\nexport const {\n  toggleCartHidden,\n  addToCart,\n  removeItem,\n  itemIncrement,\n  itemDecrement,\n  clearCart\n} = cartSlice.actions;\nexport default cartSlice.reducer;","map":{"version":3,"sources":["/home/elgarhey/development/crwn/client/src/redux/cartSlice.js"],"names":["createSlice","addItem","getUserCartRef","cartSlice","name","initialState","cartIsHidden","cartItems","getCartItemsFireStore","reducers","toggleCartHidden","state","addToCart","action","items","payload","setCartItemsFirestore","removeItem","filter","item","id","itemIncrement","map","quantity","clearCart","itemDecrement","exist","find","cartDocRef","update","snapshot","get","data","actions","reducer"],"mappings":"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","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\nimport { addItem } from '../utils';\nimport { getUserCartRef } from '../firebase/firebase.utils';\n\n//persist state in local storage\n// let items = localStorage.getItem('cartItems');\n// const persist = (data) =>\n// \tlocalStorage.setItem('cartItems', JSON.stringify(data));\nexport const cartSlice = createSlice({\n\tname: 'cart',\n\tinitialState: {\n\t\tcartIsHidden: false,\n\t\tcartItems: getCartItemsFireStore() || [],\n\t\t//cartItems: items ? JSON.parse(items) : [],\n\t},\n\treducers: {\n\t\ttoggleCartHidden: (state) => {\n\t\t\tstate.cartIsHidden = !state.cartIsHidden;\n\t\t},\n\t\taddToCart: (state, action) => {\n\t\t\tconst items = addItem(action.payload, state.cartItems);\n\t\t\tstate.cartItems = [...items];\n\t\t\t//persist(state.cartItems);\n\t\t\tsetCartItemsFirestore(state.cartItems);\n\t\t},\n\t\tremoveItem: (state, action) => {\n\t\t\tstate.cartItems = state.cartItems.filter(\n\t\t\t\t(item) => item.id !== action.payload\n\t\t\t);\n\t\t\t//persist(state.cartItems);\n\t\t\tsetCartItemsFirestore(state.cartItems);\n\t\t},\n\t\titemIncrement: (state, action) => {\n\t\t\tstate.cartItems = state.cartItems.map((item) =>\n\t\t\t\titem.id === action.payload\n\t\t\t\t\t? { ...item, quantity: item.quantity + 1 }\n\t\t\t\t\t: item\n\t\t\t);\n\t\t\t//persist(state.cartItems);\n\t\t\tsetCartItemsFirestore(state.cartItems);\n\t\t},\n\t\tclearCart: (state) => {\n\t\t\tstate.cartItems = [];\n\t\t},\n\t\titemDecrement: (state, action) => {\n\t\t\tconst exist = state.cartItems.find(\n\t\t\t\t(item) => item.id === action.payload && item.quantity === 1\n\t\t\t);\n\t\t\tif (exist) {\n\t\t\t\tstate.cartItems = state.cartItems.filter(\n\t\t\t\t\t(item) => item.id !== exist.id\n\t\t\t\t);\n\t\t\t\t//persist(state.cartItems);\n\t\t\t} else {\n\t\t\t}\n\n\t\t\tstate.cartItems = state.cartItems.map((item) =>\n\t\t\t\titem.id === action.payload\n\t\t\t\t\t? { ...item, quantity: item.quantity - 1 }\n\t\t\t\t\t: item\n\t\t\t);\n\t\t\t//persist(state.cartItems);\n\t\t\tsetCartItemsFirestore(state.cartItems);\n\t\t},\n\t},\n});\n\nexport const setCartItemsFirestore = async (cartItems) => {\n\tconst cartDocRef = await getUserCartRef();\n\tawait cartDocRef.update({ cartItems });\n};\nexport const getCartItemsFireStore = async () => {\n\tconst cartDocRef = await getUserCartRef();\n\tconst snapshot = await cartDocRef.get();\n\treturn snapshot.data().cartItems;\n};\nexport const {\n\ttoggleCartHidden,\n\taddToCart,\n\tremoveItem,\n\titemIncrement,\n\titemDecrement,\n\tclearCart,\n} = cartSlice.actions;\nexport default cartSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}