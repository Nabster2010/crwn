{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { addItem } from '../utils';\nimport { getUserCartRef } from '../firebase/firebase.utils'; //get cart items from firestore\n\nexport const getCartItemsFireStore = async () => {\n  const cartDocRef = await getUserCartRef();\n\n  if (cartDocRef) {\n    const snapshot = await cartDocRef.get();\n    return snapshot.data().cartItems;\n  }\n\n  return [];\n}; //persist state in local storage\n\nlet items = localStorage.getItem('cartItems');\n\nconst persist = data => localStorage.setItem('cartItems', JSON.stringify(data));\n\nexport const cartSlice = createSlice({\n  name: 'cart',\n  initialState: {\n    cartIsHidden: false,\n    cartItems: items ? JSON.parse(items) : []\n  },\n  reducers: {\n    toggleCartHidden: state => {\n      state.cartIsHidden = !state.cartIsHidden;\n    },\n    getCartItemsFirestore: (state, action) => {\n      state.cartItems = action.payload;\n    },\n    addToCart: (state, action) => {\n      const items = addItem(action.payload, state.cartItems);\n      state.cartItems = [...items];\n      persist(state.cartItems);\n      setCartItemsFirestore(state.cartItems);\n    },\n    removeItem: (state, action) => {\n      state.cartItems = state.cartItems.filter(item => item.id !== action.payload);\n      persist(state.cartItems);\n      setCartItemsFirestore(state.cartItems);\n    },\n    itemIncrement: (state, action) => {\n      state.cartItems = state.cartItems.map(item => item.id === action.payload ? { ...item,\n        quantity: item.quantity + 1\n      } : item);\n      persist(state.cartItems);\n      setCartItemsFirestore(state.cartItems);\n    },\n    clearCart: state => {\n      state.cartItems = [];\n    },\n    itemDecrement: (state, action) => {\n      const exist = state.cartItems.find(item => item.id === action.payload && item.quantity === 1);\n\n      if (exist) {\n        state.cartItems = state.cartItems.filter(item => item.id !== exist.id);\n        persist(state.cartItems);\n      } else {}\n\n      state.cartItems = state.cartItems.map(item => item.id === action.payload ? { ...item,\n        quantity: item.quantity - 1\n      } : item);\n      persist(state.cartItems);\n      setCartItemsFirestore(state.cartItems);\n    }\n  }\n});\nexport const setCartItemsFirestore = async cartItems => {\n  const cartDocRef = await getUserCartRef();\n\n  if (cartDocRef) {\n    await cartDocRef.update({\n      cartItems\n    });\n  }\n};\nexport const {\n  toggleCartHidden,\n  addToCart,\n  removeItem,\n  itemIncrement,\n  itemDecrement,\n  clearCart\n} = cartSlice.actions;\nexport default cartSlice.reducer;","map":{"version":3,"sources":["/home/elgarhey/development/crwn/client/src/redux/cartSlice.js"],"names":["createSlice","addItem","getUserCartRef","getCartItemsFireStore","cartDocRef","snapshot","get","data","cartItems","items","localStorage","getItem","persist","setItem","JSON","stringify","cartSlice","name","initialState","cartIsHidden","parse","reducers","toggleCartHidden","state","getCartItemsFirestore","action","payload","addToCart","setCartItemsFirestore","removeItem","filter","item","id","itemIncrement","map","quantity","clearCart","itemDecrement","exist","find","update","actions","reducer"],"mappings":"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","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\nimport { addItem } from '../utils';\nimport { getUserCartRef } from '../firebase/firebase.utils';\n\n//get cart items from firestore\nexport const getCartItemsFireStore = async () => {\n\tconst cartDocRef = await getUserCartRef();\n\tif (cartDocRef) {\n\t\tconst snapshot = await cartDocRef.get();\n\t\treturn snapshot.data().cartItems;\n\t}\n\treturn [];\n};\n\n//persist state in local storage\nlet items = localStorage.getItem('cartItems');\nconst persist = (data) =>\n\tlocalStorage.setItem('cartItems', JSON.stringify(data));\nexport const cartSlice = createSlice({\n\tname: 'cart',\n\tinitialState: {\n\t\tcartIsHidden: false,\n\n\t\tcartItems: items ? JSON.parse(items) : [],\n\t},\n\treducers: {\n\t\ttoggleCartHidden: (state) => {\n\t\t\tstate.cartIsHidden = !state.cartIsHidden;\n\t\t},\n\t\tgetCartItemsFirestore: (state, action) => {\n\t\t\tstate.cartItems = action.payload;\n\t\t},\n\t\taddToCart: (state, action) => {\n\t\t\tconst items = addItem(action.payload, state.cartItems);\n\t\t\tstate.cartItems = [...items];\n\t\t\tpersist(state.cartItems);\n\t\t\tsetCartItemsFirestore(state.cartItems);\n\t\t},\n\t\tremoveItem: (state, action) => {\n\t\t\tstate.cartItems = state.cartItems.filter(\n\t\t\t\t(item) => item.id !== action.payload\n\t\t\t);\n\t\t\tpersist(state.cartItems);\n\t\t\tsetCartItemsFirestore(state.cartItems);\n\t\t},\n\t\titemIncrement: (state, action) => {\n\t\t\tstate.cartItems = state.cartItems.map((item) =>\n\t\t\t\titem.id === action.payload\n\t\t\t\t\t? { ...item, quantity: item.quantity + 1 }\n\t\t\t\t\t: item\n\t\t\t);\n\t\t\tpersist(state.cartItems);\n\t\t\tsetCartItemsFirestore(state.cartItems);\n\t\t},\n\t\tclearCart: (state) => {\n\t\t\tstate.cartItems = [];\n\t\t},\n\t\titemDecrement: (state, action) => {\n\t\t\tconst exist = state.cartItems.find(\n\t\t\t\t(item) => item.id === action.payload && item.quantity === 1\n\t\t\t);\n\t\t\tif (exist) {\n\t\t\t\tstate.cartItems = state.cartItems.filter(\n\t\t\t\t\t(item) => item.id !== exist.id\n\t\t\t\t);\n\t\t\t\tpersist(state.cartItems);\n\t\t\t} else {\n\t\t\t}\n\n\t\t\tstate.cartItems = state.cartItems.map((item) =>\n\t\t\t\titem.id === action.payload\n\t\t\t\t\t? { ...item, quantity: item.quantity - 1 }\n\t\t\t\t\t: item\n\t\t\t);\n\t\t\tpersist(state.cartItems);\n\t\t\tsetCartItemsFirestore(state.cartItems);\n\t\t},\n\t},\n});\n\nexport const setCartItemsFirestore = async (cartItems) => {\n\tconst cartDocRef = await getUserCartRef();\n\tif (cartDocRef) {\n\t\tawait cartDocRef.update({ cartItems });\n\t}\n};\n\nexport const {\n\ttoggleCartHidden,\n\taddToCart,\n\tremoveItem,\n\titemIncrement,\n\titemDecrement,\n\tclearCart,\n} = cartSlice.actions;\nexport default cartSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}