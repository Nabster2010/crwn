{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { addItem } from '../utils'; //persist state in local storage\n\nlet items = localStorage.getItem('cartItems');\n\nconst persist = data => localStorage.setItem('cartItems', JSON.stringify(data));\n\nexport const cartSlice = createSlice({\n  name: 'cart',\n  initialState: {\n    cartIsHidden: false,\n    cartItems: items ? JSON.parse(items) : []\n  },\n  reducers: {\n    toggleCartHidden: state => {\n      state.cartIsHidden = !state.cartIsHidden;\n    },\n    addToCart: (state, action) => {\n      const items = addItem(action.payload, state.cartItems);\n      state.cartItems = [...items];\n      persist(state.cartItems);\n    },\n    removeItem: (state, action) => {\n      state.cartItems = state.cartItems.filter(item => item.id !== action.payload);\n      persist(state.cartItems);\n    },\n    itemIncrement: (state, action) => {\n      state.cartItems = state.cartItems.map(item => item.id === action.payload ? { ...item,\n        quantity: item.quantity + 1\n      } : item);\n      persist(state.cartItems);\n    },\n    CLEAR_CART: state => {\n      state.cartItems = [];\n    },\n    itemDecrement: (state, action) => {\n      const exist = state.cartItems.find(item => item.id === action.payload && item.quantity === 1);\n\n      if (exist) {\n        state.cartItems = state.cartItems.filter(item => item.id !== exist.id);\n        persist(state.cartItems);\n      } else {}\n\n      state.cartItems = state.cartItems.map(item => item.id === action.payload ? { ...item,\n        quantity: item.quantity - 1\n      } : item);\n      persist(state.cartItems);\n    }\n  }\n});\nexport const {\n  toggleCartHidden,\n  addToCart,\n  removeItem,\n  itemIncrement,\n  itemDecrement\n} = cartSlice.actions;\nexport default cartSlice.reducer;","map":{"version":3,"sources":["/home/elgarhey/development/crwn/src/redux/cartSlice.js"],"names":["createSlice","addItem","items","localStorage","getItem","persist","data","setItem","JSON","stringify","cartSlice","name","initialState","cartIsHidden","cartItems","parse","reducers","toggleCartHidden","state","addToCart","action","payload","removeItem","filter","item","id","itemIncrement","map","quantity","CLEAR_CART","itemDecrement","exist","find","actions","reducer"],"mappings":"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","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\nimport { addItem } from '../utils';\n\n//persist state in local storage\nlet items = localStorage.getItem('cartItems');\nconst persist = (data) =>\n\tlocalStorage.setItem('cartItems', JSON.stringify(data));\nexport const cartSlice = createSlice({\n\tname: 'cart',\n\tinitialState: {\n\t\tcartIsHidden: false,\n\t\tcartItems: items ? JSON.parse(items) : [],\n\t},\n\treducers: {\n\t\ttoggleCartHidden: (state) => {\n\t\t\tstate.cartIsHidden = !state.cartIsHidden;\n\t\t},\n\t\taddToCart: (state, action) => {\n\t\t\tconst items = addItem(action.payload, state.cartItems);\n\t\t\tstate.cartItems = [...items];\n\t\t\tpersist(state.cartItems);\n\t\t},\n\t\tremoveItem: (state, action) => {\n\t\t\tstate.cartItems = state.cartItems.filter(\n\t\t\t\t(item) => item.id !== action.payload\n\t\t\t);\n\t\t\tpersist(state.cartItems);\n\t\t},\n\t\titemIncrement: (state, action) => {\n\t\t\tstate.cartItems = state.cartItems.map((item) =>\n\t\t\t\titem.id === action.payload\n\t\t\t\t\t? { ...item, quantity: item.quantity + 1 }\n\t\t\t\t\t: item\n\t\t\t);\n\t\t\tpersist(state.cartItems);\n\t\t},\n\t\tCLEAR_CART: (state) => {\n\t\t\tstate.cartItems = [];\n\t\t},\n\t\titemDecrement: (state, action) => {\n\t\t\tconst exist = state.cartItems.find(\n\t\t\t\t(item) => item.id === action.payload && item.quantity === 1\n\t\t\t);\n\t\t\tif (exist) {\n\t\t\t\tstate.cartItems = state.cartItems.filter(\n\t\t\t\t\t(item) => item.id !== exist.id\n\t\t\t\t);\n\t\t\t\tpersist(state.cartItems);\n\t\t\t} else {\n\t\t\t}\n\n\t\t\tstate.cartItems = state.cartItems.map((item) =>\n\t\t\t\titem.id === action.payload\n\t\t\t\t\t? { ...item, quantity: item.quantity - 1 }\n\t\t\t\t\t: item\n\t\t\t);\n\t\t\tpersist(state.cartItems);\n\t\t},\n\t},\n});\nexport const {\n\ttoggleCartHidden,\n\taddToCart,\n\tremoveItem,\n\titemIncrement,\n\titemDecrement,\n} = cartSlice.actions;\nexport default cartSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}