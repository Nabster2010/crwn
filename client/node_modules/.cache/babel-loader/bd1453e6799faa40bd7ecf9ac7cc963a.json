{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { googleProvider, signInWithGoogle, auth, firestore, createUserProfileDocument } from '../firebase/firebase.utils';\nexport const userSlice = createSlice({\n  name: 'user',\n  initialState: {\n    currentUser: null,\n    error: ''\n  },\n  reducers: {\n    SET_CURRENT_USER: (state, action) => {\n      state.currentUser = action.payload;\n    },\n    GOOGLE_SIGNIN_SUCCESS: (state, action) => {\n      state.currentUser = action.payload;\n      state.error = '';\n    },\n    GOOGLE_SIGNIN_FAILURE: (state, action) => {\n      state.currentUser = null;\n      state.error = action.payload;\n    },\n    SIGNIN_USER_PASSWORD: () => {},\n    SIGNIN_FAIL: () => {},\n    SIGN_OUT: () => {}\n  }\n});\nexport const {\n  SET_CURRENT_USER,\n  GOOGLE_SIGNIN_SUCCESS,\n  GOOGLE_SIGNIN_FAILURE\n} = userSlice.actions;\nexport default userSlice.reducer;\nexport const googleSignIn = () => async dispatch => {\n  try {\n    const {\n      user\n    } = await signInWithGoogle();\n    const docRef = await createUserProfileDocument(user, {});\n    const snap = await docRef.get(); //dispatch(GOOGLE_SIGNIN_SUCCESS(snap.data()));\n  } catch (err) {//dispatch(GOOGLE_SIGNIN_FAILURE(err.message));\n  }\n};","map":{"version":3,"sources":["/home/elgarhey/development/crwn/src/redux/userSlice.js"],"names":["createSlice","googleProvider","signInWithGoogle","auth","firestore","createUserProfileDocument","userSlice","name","initialState","currentUser","error","reducers","SET_CURRENT_USER","state","action","payload","GOOGLE_SIGNIN_SUCCESS","GOOGLE_SIGNIN_FAILURE","SIGNIN_USER_PASSWORD","SIGNIN_FAIL","SIGN_OUT","actions","reducer","googleSignIn","dispatch","user","docRef","snap","get","err"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AACA,SACCC,cADD,EAECC,gBAFD,EAGCC,IAHD,EAICC,SAJD,EAKCC,yBALD,QAMO,4BANP;AAOA,OAAO,MAAMC,SAAS,GAAGN,WAAW,CAAC;AACpCO,EAAAA,IAAI,EAAE,MAD8B;AAEpCC,EAAAA,YAAY,EAAE;AACbC,IAAAA,WAAW,EAAE,IADA;AAEbC,IAAAA,KAAK,EAAE;AAFM,GAFsB;AAMpCC,EAAAA,QAAQ,EAAE;AACTC,IAAAA,gBAAgB,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACpCD,MAAAA,KAAK,CAACJ,WAAN,GAAoBK,MAAM,CAACC,OAA3B;AACA,KAHQ;AAITC,IAAAA,qBAAqB,EAAE,CAACH,KAAD,EAAQC,MAAR,KAAmB;AACzCD,MAAAA,KAAK,CAACJ,WAAN,GAAoBK,MAAM,CAACC,OAA3B;AACAF,MAAAA,KAAK,CAACH,KAAN,GAAc,EAAd;AACA,KAPQ;AAQTO,IAAAA,qBAAqB,EAAE,CAACJ,KAAD,EAAQC,MAAR,KAAmB;AACzCD,MAAAA,KAAK,CAACJ,WAAN,GAAoB,IAApB;AACAI,MAAAA,KAAK,CAACH,KAAN,GAAcI,MAAM,CAACC,OAArB;AACA,KAXQ;AAYTG,IAAAA,oBAAoB,EAAE,MAAM,CAAE,CAZrB;AAaTC,IAAAA,WAAW,EAAE,MAAM,CAAE,CAbZ;AAeTC,IAAAA,QAAQ,EAAE,MAAM,CAAE;AAfT;AAN0B,CAAD,CAA7B;AAwBP,OAAO,MAAM;AACZR,EAAAA,gBADY;AAEZI,EAAAA,qBAFY;AAGZC,EAAAA;AAHY,IAITX,SAAS,CAACe,OAJP;AAKP,eAAef,SAAS,CAACgB,OAAzB;AAEA,OAAO,MAAMC,YAAY,GAAG,MAAM,MAAOC,QAAP,IAAoB;AACrD,MAAI;AACH,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMvB,gBAAgB,EAAvC;AACA,UAAMwB,MAAM,GAAG,MAAMrB,yBAAyB,CAACoB,IAAD,EAAO,EAAP,CAA9C;AACA,UAAME,IAAI,GAAG,MAAMD,MAAM,CAACE,GAAP,EAAnB,CAHG,CAIH;AACA,GALD,CAKE,OAAOC,GAAP,EAAY,CACb;AACA;AACD,CATM","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\nimport {\n\tgoogleProvider,\n\tsignInWithGoogle,\n\tauth,\n\tfirestore,\n\tcreateUserProfileDocument,\n} from '../firebase/firebase.utils';\nexport const userSlice = createSlice({\n\tname: 'user',\n\tinitialState: {\n\t\tcurrentUser: null,\n\t\terror: '',\n\t},\n\treducers: {\n\t\tSET_CURRENT_USER: (state, action) => {\n\t\t\tstate.currentUser = action.payload;\n\t\t},\n\t\tGOOGLE_SIGNIN_SUCCESS: (state, action) => {\n\t\t\tstate.currentUser = action.payload;\n\t\t\tstate.error = '';\n\t\t},\n\t\tGOOGLE_SIGNIN_FAILURE: (state, action) => {\n\t\t\tstate.currentUser = null;\n\t\t\tstate.error = action.payload;\n\t\t},\n\t\tSIGNIN_USER_PASSWORD: () => {},\n\t\tSIGNIN_FAIL: () => {},\n\n\t\tSIGN_OUT: () => {},\n\t},\n});\nexport const {\n\tSET_CURRENT_USER,\n\tGOOGLE_SIGNIN_SUCCESS,\n\tGOOGLE_SIGNIN_FAILURE,\n} = userSlice.actions;\nexport default userSlice.reducer;\n\nexport const googleSignIn = () => async (dispatch) => {\n\ttry {\n\t\tconst { user } = await signInWithGoogle();\n\t\tconst docRef = await createUserProfileDocument(user, {});\n\t\tconst snap = await docRef.get();\n\t\t//dispatch(GOOGLE_SIGNIN_SUCCESS(snap.data()));\n\t} catch (err) {\n\t\t//dispatch(GOOGLE_SIGNIN_FAILURE(err.message));\n\t}\n};\n"]},"metadata":{},"sourceType":"module"}