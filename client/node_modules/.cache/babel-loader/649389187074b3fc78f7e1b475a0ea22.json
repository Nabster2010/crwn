{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { firestore } from '../firebase/firebase.utils';\nconst initialState = {\n  loading: false,\n  error: '',\n  collections: []\n};\nexport const shopSlice = createSlice({\n  name: 'shop',\n  initialState: initialState,\n  reducers: {\n    FETCH_COLLECTION_START: state => {\n      state.loading = true;\n    },\n    FETCH_COLLECTION_SUCCESS: (state, action) => {\n      state.loading = false;\n      state.collections = action.payload;\n      state.error = '';\n    },\n    FETCH_COLLECTION_FAILURE: (state, action) => {\n      state.loading = false;\n      state.collections = [];\n      state.error = action.payload ? action.payload : 'something went wrong';\n    }\n  }\n});\nexport default shopSlice.reducer;\nexport const {\n  FETCH_COLLECTION_FAILURE,\n  FETCH_COLLECTION_SUCCESS,\n  FETCH_COLLECTION_START\n} = shopSlice.actions;\nexport const setShopData = () => dispatch => {\n  dispatch(FETCH_COLLECTION_START());\n  const colRef = firestore.collection('collctions');\n  colRef.onSnapshot(snap => {\n    console.log(snap);\n\n    if (!snap.empty) {\n      let documents = snap.docs.map(doc => ({\n        id: doc.id,\n        routeName: doc.data().title.toLowerCase(),\n        ...doc.data()\n      }));\n      dispatch(FETCH_COLLECTION_SUCCESS(documents));\n    }\n  }, err => {\n    dispatch(FETCH_COLLECTION_FAILURE(err));\n  });\n};","map":{"version":3,"sources":["/home/elgarhey/development/crwn/src/redux/shopSlice.js"],"names":["createSlice","firestore","initialState","loading","error","collections","shopSlice","name","reducers","FETCH_COLLECTION_START","state","FETCH_COLLECTION_SUCCESS","action","payload","FETCH_COLLECTION_FAILURE","reducer","actions","setShopData","dispatch","colRef","collection","onSnapshot","snap","console","log","empty","documents","docs","map","doc","id","routeName","data","title","toLowerCase","err"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAEA,SAASC,SAAT,QAA0B,4BAA1B;AACA,MAAMC,YAAY,GAAG;AACpBC,EAAAA,OAAO,EAAE,KADW;AAEpBC,EAAAA,KAAK,EAAE,EAFa;AAGpBC,EAAAA,WAAW,EAAE;AAHO,CAArB;AAMA,OAAO,MAAMC,SAAS,GAAGN,WAAW,CAAC;AACpCO,EAAAA,IAAI,EAAE,MAD8B;AAEpCL,EAAAA,YAAY,EAAEA,YAFsB;AAGpCM,EAAAA,QAAQ,EAAE;AACTC,IAAAA,sBAAsB,EAAGC,KAAD,IAAW;AAClCA,MAAAA,KAAK,CAACP,OAAN,GAAgB,IAAhB;AACA,KAHQ;AAITQ,IAAAA,wBAAwB,EAAE,CAACD,KAAD,EAAQE,MAAR,KAAmB;AAC5CF,MAAAA,KAAK,CAACP,OAAN,GAAgB,KAAhB;AACAO,MAAAA,KAAK,CAACL,WAAN,GAAoBO,MAAM,CAACC,OAA3B;AACAH,MAAAA,KAAK,CAACN,KAAN,GAAc,EAAd;AACA,KARQ;AASTU,IAAAA,wBAAwB,EAAE,CAACJ,KAAD,EAAQE,MAAR,KAAmB;AAC5CF,MAAAA,KAAK,CAACP,OAAN,GAAgB,KAAhB;AACAO,MAAAA,KAAK,CAACL,WAAN,GAAoB,EAApB;AACAK,MAAAA,KAAK,CAACN,KAAN,GAAcQ,MAAM,CAACC,OAAP,GAAiBD,MAAM,CAACC,OAAxB,GAAkC,sBAAhD;AACA;AAbQ;AAH0B,CAAD,CAA7B;AAoBP,eAAeP,SAAS,CAACS,OAAzB;AACA,OAAO,MAAM;AACZD,EAAAA,wBADY;AAEZH,EAAAA,wBAFY;AAGZF,EAAAA;AAHY,IAITH,SAAS,CAACU,OAJP;AAMP,OAAO,MAAMC,WAAW,GAAG,MAAOC,QAAD,IAAc;AAC9CA,EAAAA,QAAQ,CAACT,sBAAsB,EAAvB,CAAR;AACA,QAAMU,MAAM,GAAGlB,SAAS,CAACmB,UAAV,CAAqB,YAArB,CAAf;AAEAD,EAAAA,MAAM,CAACE,UAAP,CACEC,IAAD,IAAU;AACTC,IAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;;AAEA,QAAI,CAACA,IAAI,CAACG,KAAV,EAAiB;AAChB,UAAIC,SAAS,GAAGJ,IAAI,CAACK,IAAL,CAAUC,GAAV,CAAeC,GAAD,KAAU;AACvCC,QAAAA,EAAE,EAAED,GAAG,CAACC,EAD+B;AAEvCC,QAAAA,SAAS,EAAEF,GAAG,CAACG,IAAJ,GAAWC,KAAX,CAAiBC,WAAjB,EAF4B;AAGvC,WAAGL,GAAG,CAACG,IAAJ;AAHoC,OAAV,CAAd,CAAhB;AAKAd,MAAAA,QAAQ,CAACP,wBAAwB,CAACe,SAAD,CAAzB,CAAR;AACA;AACD,GAZF,EAaES,GAAD,IAAS;AACRjB,IAAAA,QAAQ,CAACJ,wBAAwB,CAACqB,GAAD,CAAzB,CAAR;AACA,GAfF;AAiBA,CArBM","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\n\nimport { firestore } from '../firebase/firebase.utils';\nconst initialState = {\n\tloading: false,\n\terror: '',\n\tcollections: [],\n};\n\nexport const shopSlice = createSlice({\n\tname: 'shop',\n\tinitialState: initialState,\n\treducers: {\n\t\tFETCH_COLLECTION_START: (state) => {\n\t\t\tstate.loading = true;\n\t\t},\n\t\tFETCH_COLLECTION_SUCCESS: (state, action) => {\n\t\t\tstate.loading = false;\n\t\t\tstate.collections = action.payload;\n\t\t\tstate.error = '';\n\t\t},\n\t\tFETCH_COLLECTION_FAILURE: (state, action) => {\n\t\t\tstate.loading = false;\n\t\t\tstate.collections = [];\n\t\t\tstate.error = action.payload ? action.payload : 'something went wrong';\n\t\t},\n\t},\n});\n\nexport default shopSlice.reducer;\nexport const {\n\tFETCH_COLLECTION_FAILURE,\n\tFETCH_COLLECTION_SUCCESS,\n\tFETCH_COLLECTION_START,\n} = shopSlice.actions;\n\nexport const setShopData = () => (dispatch) => {\n\tdispatch(FETCH_COLLECTION_START());\n\tconst colRef = firestore.collection('collctions');\n\n\tcolRef.onSnapshot(\n\t\t(snap) => {\n\t\t\tconsole.log(snap);\n\n\t\t\tif (!snap.empty) {\n\t\t\t\tlet documents = snap.docs.map((doc) => ({\n\t\t\t\t\tid: doc.id,\n\t\t\t\t\trouteName: doc.data().title.toLowerCase(),\n\t\t\t\t\t...doc.data(),\n\t\t\t\t}));\n\t\t\t\tdispatch(FETCH_COLLECTION_SUCCESS(documents));\n\t\t\t}\n\t\t},\n\t\t(err) => {\n\t\t\tdispatch(FETCH_COLLECTION_FAILURE(err));\n\t\t}\n\t);\n};\n"]},"metadata":{},"sourceType":"module"}